// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_authorization_model

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func AuthorizationModelResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"assertions": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"expectation": schema.BoolAttribute{
							Required: true,
						},
						"tuple_key": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"object": schema.StringAttribute{
									Required: true,
								},
								"relation": schema.StringAttribute{
									Required: true,
								},
								"user": schema.StringAttribute{
									Required: true,
								},
							},
							CustomType: TupleKeyType{
								ObjectType: types.ObjectType{
									AttrTypes: TupleKeyValue{}.AttributeTypes(ctx),
								},
							},
							Required: true,
						},
					},
					CustomType: AssertionsType{
						ObjectType: types.ObjectType{
							AttrTypes: AssertionsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional: true,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"model_json": schema.StringAttribute{
				CustomType: jsontypes.NormalizedType{},
				Required:   true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"store_id": schema.StringAttribute{
				Required: true,
			},
		},
	}
}

type AuthorizationModelModel struct {
	Assertions types.List           `tfsdk:"assertions"`
	Id         types.String         `tfsdk:"id"`
	ModelJson  jsontypes.Normalized `tfsdk:"model_json"`
	StoreId    types.String         `tfsdk:"store_id"`
}

var _ basetypes.ObjectTypable = AssertionsType{}

type AssertionsType struct {
	basetypes.ObjectType
}

func (t AssertionsType) Equal(o attr.Type) bool {
	other, ok := o.(AssertionsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AssertionsType) String() string {
	return "AssertionsType"
}

func (t AssertionsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	expectationAttribute, ok := attributes["expectation"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`expectation is missing from object`)

		return nil, diags
	}

	expectationVal, ok := expectationAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`expectation expected to be basetypes.BoolValue, was: %T`, expectationAttribute))
	}

	tupleKeyAttribute, ok := attributes["tuple_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tuple_key is missing from object`)

		return nil, diags
	}

	tupleKeyVal, ok := tupleKeyAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tuple_key expected to be basetypes.ObjectValue, was: %T`, tupleKeyAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AssertionsValue{
		Expectation: expectationVal,
		TupleKey:    tupleKeyVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewAssertionsValueNull() AssertionsValue {
	return AssertionsValue{
		state: attr.ValueStateNull,
	}
}

func NewAssertionsValueUnknown() AssertionsValue {
	return AssertionsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAssertionsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AssertionsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AssertionsValue Attribute Value",
				"While creating a AssertionsValue value, a missing attribute value was detected. "+
					"A AssertionsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AssertionsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AssertionsValue Attribute Type",
				"While creating a AssertionsValue value, an invalid attribute value was detected. "+
					"A AssertionsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AssertionsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AssertionsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AssertionsValue Attribute Value",
				"While creating a AssertionsValue value, an extra attribute value was detected. "+
					"A AssertionsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AssertionsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAssertionsValueUnknown(), diags
	}

	expectationAttribute, ok := attributes["expectation"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`expectation is missing from object`)

		return NewAssertionsValueUnknown(), diags
	}

	expectationVal, ok := expectationAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`expectation expected to be basetypes.BoolValue, was: %T`, expectationAttribute))
	}

	tupleKeyAttribute, ok := attributes["tuple_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tuple_key is missing from object`)

		return NewAssertionsValueUnknown(), diags
	}

	tupleKeyVal, ok := tupleKeyAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tuple_key expected to be basetypes.ObjectValue, was: %T`, tupleKeyAttribute))
	}

	if diags.HasError() {
		return NewAssertionsValueUnknown(), diags
	}

	return AssertionsValue{
		Expectation: expectationVal,
		TupleKey:    tupleKeyVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewAssertionsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AssertionsValue {
	object, diags := NewAssertionsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAssertionsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AssertionsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAssertionsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAssertionsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAssertionsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAssertionsValueMust(AssertionsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AssertionsType) ValueType(ctx context.Context) attr.Value {
	return AssertionsValue{}
}

var _ basetypes.ObjectValuable = AssertionsValue{}

type AssertionsValue struct {
	Expectation basetypes.BoolValue   `tfsdk:"expectation"`
	TupleKey    basetypes.ObjectValue `tfsdk:"tuple_key"`
	state       attr.ValueState
}

func (v AssertionsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["expectation"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["tuple_key"] = basetypes.ObjectType{
		AttrTypes: TupleKeyValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Expectation.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["expectation"] = val

		val, err = v.TupleKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tuple_key"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AssertionsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AssertionsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AssertionsValue) String() string {
	return "AssertionsValue"
}

func (v AssertionsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var tupleKey basetypes.ObjectValue

	if v.TupleKey.IsNull() {
		tupleKey = types.ObjectNull(
			TupleKeyValue{}.AttributeTypes(ctx),
		)
	}

	if v.TupleKey.IsUnknown() {
		tupleKey = types.ObjectUnknown(
			TupleKeyValue{}.AttributeTypes(ctx),
		)
	}

	if !v.TupleKey.IsNull() && !v.TupleKey.IsUnknown() {
		tupleKey = types.ObjectValueMust(
			TupleKeyValue{}.AttributeTypes(ctx),
			v.TupleKey.Attributes(),
		)
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"expectation": basetypes.BoolType{},
			"tuple_key": basetypes.ObjectType{
				AttrTypes: TupleKeyValue{}.AttributeTypes(ctx),
			},
		},
		map[string]attr.Value{
			"expectation": v.Expectation,
			"tuple_key":   tupleKey,
		})

	return objVal, diags
}

func (v AssertionsValue) Equal(o attr.Value) bool {
	other, ok := o.(AssertionsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Expectation.Equal(other.Expectation) {
		return false
	}

	if !v.TupleKey.Equal(other.TupleKey) {
		return false
	}

	return true
}

func (v AssertionsValue) Type(ctx context.Context) attr.Type {
	return AssertionsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AssertionsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"expectation": basetypes.BoolType{},
		"tuple_key": basetypes.ObjectType{
			AttrTypes: TupleKeyValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = TupleKeyType{}

type TupleKeyType struct {
	basetypes.ObjectType
}

func (t TupleKeyType) Equal(o attr.Type) bool {
	other, ok := o.(TupleKeyType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TupleKeyType) String() string {
	return "TupleKeyType"
}

func (t TupleKeyType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	objectAttribute, ok := attributes["object"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`object is missing from object`)

		return nil, diags
	}

	objectVal, ok := objectAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`object expected to be basetypes.StringValue, was: %T`, objectAttribute))
	}

	relationAttribute, ok := attributes["relation"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`relation is missing from object`)

		return nil, diags
	}

	relationVal, ok := relationAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`relation expected to be basetypes.StringValue, was: %T`, relationAttribute))
	}

	userAttribute, ok := attributes["user"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user is missing from object`)

		return nil, diags
	}

	userVal, ok := userAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user expected to be basetypes.StringValue, was: %T`, userAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TupleKeyValue{
		Object:   objectVal,
		Relation: relationVal,
		User:     userVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewTupleKeyValueNull() TupleKeyValue {
	return TupleKeyValue{
		state: attr.ValueStateNull,
	}
}

func NewTupleKeyValueUnknown() TupleKeyValue {
	return TupleKeyValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTupleKeyValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TupleKeyValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TupleKeyValue Attribute Value",
				"While creating a TupleKeyValue value, a missing attribute value was detected. "+
					"A TupleKeyValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TupleKeyValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TupleKeyValue Attribute Type",
				"While creating a TupleKeyValue value, an invalid attribute value was detected. "+
					"A TupleKeyValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TupleKeyValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TupleKeyValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TupleKeyValue Attribute Value",
				"While creating a TupleKeyValue value, an extra attribute value was detected. "+
					"A TupleKeyValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TupleKeyValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTupleKeyValueUnknown(), diags
	}

	objectAttribute, ok := attributes["object"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`object is missing from object`)

		return NewTupleKeyValueUnknown(), diags
	}

	objectVal, ok := objectAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`object expected to be basetypes.StringValue, was: %T`, objectAttribute))
	}

	relationAttribute, ok := attributes["relation"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`relation is missing from object`)

		return NewTupleKeyValueUnknown(), diags
	}

	relationVal, ok := relationAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`relation expected to be basetypes.StringValue, was: %T`, relationAttribute))
	}

	userAttribute, ok := attributes["user"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user is missing from object`)

		return NewTupleKeyValueUnknown(), diags
	}

	userVal, ok := userAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user expected to be basetypes.StringValue, was: %T`, userAttribute))
	}

	if diags.HasError() {
		return NewTupleKeyValueUnknown(), diags
	}

	return TupleKeyValue{
		Object:   objectVal,
		Relation: relationVal,
		User:     userVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewTupleKeyValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TupleKeyValue {
	object, diags := NewTupleKeyValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTupleKeyValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TupleKeyType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTupleKeyValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTupleKeyValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTupleKeyValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTupleKeyValueMust(TupleKeyValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TupleKeyType) ValueType(ctx context.Context) attr.Value {
	return TupleKeyValue{}
}

var _ basetypes.ObjectValuable = TupleKeyValue{}

type TupleKeyValue struct {
	Object   basetypes.StringValue `tfsdk:"object"`
	Relation basetypes.StringValue `tfsdk:"relation"`
	User     basetypes.StringValue `tfsdk:"user"`
	state    attr.ValueState
}

func (v TupleKeyValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["object"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["relation"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["user"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Object.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["object"] = val

		val, err = v.Relation.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["relation"] = val

		val, err = v.User.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["user"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TupleKeyValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TupleKeyValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TupleKeyValue) String() string {
	return "TupleKeyValue"
}

func (v TupleKeyValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"object":   basetypes.StringType{},
			"relation": basetypes.StringType{},
			"user":     basetypes.StringType{},
		},
		map[string]attr.Value{
			"object":   v.Object,
			"relation": v.Relation,
			"user":     v.User,
		})

	return objVal, diags
}

func (v TupleKeyValue) Equal(o attr.Value) bool {
	other, ok := o.(TupleKeyValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Object.Equal(other.Object) {
		return false
	}

	if !v.Relation.Equal(other.Relation) {
		return false
	}

	if !v.User.Equal(other.User) {
		return false
	}

	return true
}

func (v TupleKeyValue) Type(ctx context.Context) attr.Type {
	return TupleKeyType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TupleKeyValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"object":   basetypes.StringType{},
		"relation": basetypes.StringType{},
		"user":     basetypes.StringType{},
	}
}
